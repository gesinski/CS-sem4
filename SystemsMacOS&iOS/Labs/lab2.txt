import Foundation

print("Ex. 1") //Functions

func minValue(_ number1: Int, _ number2: Int) -> Int {
    return number1 < number2 ? number1 : number2
}

print(minValue(5, 6))
print(minValue(10, -10))

func lastDigit(_ digit: Int) -> Int {
  return digit % 10
}

print(lastDigit(1234))

func divides(_ a: Int, _ b: Int) -> Bool {
  if a % b == 0 {
    return true
  }
  else {
    return false
  }
}

func countDivisors(_ number: Int) -> Int {
  var count = 0
  for i in 1...number {
    if divides(number, i) {
      count += 1
    }
  }
  return count
}

func isPrime(_ number: Int) -> Void {
  if countDivisors(number) == 2 {
    print("Is prime")
  }
  else {
    print("Is not prime")
  }
}

isPrime(3)
isPrime(10)

print("Ex. 2") //Closures

var text: () -> () = {
  print("I will pass this course with best mark, because Swift is great!")
}

func smarBart(_ n: Int,_ f: ()->()) -> Void {
  for _ in 1...n {
    f()
  }
}

smarBart(5, text)

let numbers = [10, 16, 18, 30, 38, 40, 44, 50]

print(numbers.filter{$0 % 4 == 0})
print(numbers.reduce(0) { max($0, $1) })

var strings = ["Gdansk", "University", "of", "Technology"]

print(strings.reduce(""){$0.isEmpty ? $1 : $0 + " " + $1})

let numbers2 = [1, 2 ,3 ,4, 5, 6]

print(numbers2.filter{$0 % 2 == 1}.map{$0 * $0}.reduce(0){$0 + $1})

print("Ex. 3") //Tuples

func minmax(_ number1: Int, _ number2: Int) -> (Int, Int) {
  let tuple = (min(number1, number2), max(number1, number2))
  return tuple
}

print(minmax(5, -1))

func countStrings(_ strings: [String], _ string: String) -> Int {
    var count = 0
    for i in strings {
        if i == string {
            count += 1
        }
    }
    return count
}

var strings2 = ["gdansk", "university", "gdansk", "university", "university", "of", "technology", "technology", "gdansk", "gdansk"]

var countedStrings: [(String, Int)] = []

for string in Set(strings2) { 
    countedStrings.append((string, countStrings(strings2, string)))
}

print(countedStrings)

print("Ex. 4") //Enums

enum Day: Int {
    case Monday = 1
    case Tuesday
    case Wednesday
    case Thursday
    case Friday
    case Saturday
    case Sunday

    func emojiDay() -> String {
        switch self {
        case .Monday:
            return "🙌"
        case .Tuesday:
            return "🍾"
        case .Wednesday:
            return "🏆"
        case .Thursday:
            return "🎉"
        case .Friday:
            return "👩‍💻"
        case .Saturday:
            return "👨‍💻"
        case .Sunday:
            return "😊"
        }
    }
}

let weekDay = Day.Wednesday
print(weekDay.rawValue)
print(weekDay.emojiDay())