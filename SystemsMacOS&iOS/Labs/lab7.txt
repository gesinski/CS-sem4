import Foundation

enum PlayerType {
    case human
    case ai
}

class Player {
    let symbol: String
    let type: PlayerType
    
    init(symbol: String, type: PlayerType) {
        self.symbol = symbol
        self.type = type
    }
}

class TicTacToeGame {
    var board: [String]
    var currentPlayer: Player
    var player1: Player
    var player2: Player
    var aiLevel: String
    
    init(aiLevel: String) {
        self.board = Array(repeating: " ", count: 9)
        self.player1 = Player(symbol: "X", type: .human)
        self.player2 = Player(symbol: "O", type: .ai)
        self.currentPlayer = player1
        self.aiLevel = aiLevel
    }
    
    func drawBoard() {
        print("""
              \(board[0]) | \(board[1]) | \(board[2])
              ---------
              \(board[3]) | \(board[4]) | \(board[5])
              ---------
              \(board[6]) | \(board[7]) | \(board[8])
              """)
    }
    
    func checkWin(_ symbol: String) -> Bool {
        let wins = [
            [0,1,2], [3,4,5], [6,7,8],
            [0,3,6], [1,4,7], [2,5,8],
            [0,4,8], [2,4,6]
        ]
        return wins.contains { $0.allSatisfy { board[$0] == symbol } }
    }
    
    func isDraw() -> Bool {
        return !board.contains(" ")
    }
    
    func switchPlayer() {
        currentPlayer = (currentPlayer.symbol == player1.symbol) ? player2 : player1
    }
    
    func getHumanMove() -> Int {
        var move: Int?
        repeat {
            print("Enter position (1-9): ", terminator: "")
            if let input = readLine(), let number = Int(input), number >= 1, number <= 9, board[number-1] == " " {
                move = number - 1
            } else {
                print("Invalid move.")
            }
        } while move == nil
        return move!
    }
    
    func getAIMove() -> Int {
        switch aiLevel {
        case "easy":
            return easyAIMove()
        case "medium":
            return mediumAIMove()
        case "hard":
            return hardAIMove()
        default:
            return easyAIMove()
        }
    }

    func easyAIMove() -> Int {
        return board.indices.filter { board[$0] == " " }.randomElement()!
    }

    func mediumAIMove() -> Int {
        // Win if possible
        for i in board.indices where board[i] == " " {
            board[i] = player2.symbol
            if checkWin(player2.symbol) {
                return i
            }
            board[i] = " "
        }
        // Block opponent
        for i in board.indices where board[i] == " " {
            board[i] = player1.symbol
            if checkWin(player1.symbol) {
                board[i] = " "
                return i
            }
            board[i] = " "
        }
        return easyAIMove()
    }

    func hardAIMove() -> Int {
        func minimax(_ board: [String], isMax: Bool) -> (Int, Int) {
            if checkWin(player2.symbol) {
                return (10, -1)
            }
            if checkWin(player1.symbol) {
                return (-10, -1)
            }
            if !board.contains(" ") {
                return (0, -1)
            }

            var bestScore = isMax ? Int.min : Int.max
            var bestMove = -1

            for i in 0..<board.count where board[i] == " " {
                var newBoard = board
                newBoard[i] = isMax ? player2.symbol : player1.symbol
                let score = minimax(newBoard, isMax: !isMax).0
                if isMax {
                    if score > bestScore {
                        bestScore = score
                        bestMove = i
                    }
                } else {
                    if score < bestScore {
                        bestScore = score
                        bestMove = i
                    }
                }
            }
            return (bestScore, bestMove)
        }

        return minimax(board, isMax: true).1
    }
    
    func play() {
        print("Starting new game! AI level: \(aiLevel.capitalized)")
        drawBoard()
        while true {
            let move = currentPlayer.type == .human ? getHumanMove() : getAIMove()
            board[move] = currentPlayer.symbol
            if currentPlayer.type == .ai {
                print("AI's move:")
            }
            drawBoard()
            
            if checkWin(currentPlayer.symbol) {
                print("\(currentPlayer.type == .human ? "You win!" : "AI wins!")")
                break
            } else if isDraw() {
                print("It's a draw!")
                break
            }
            switchPlayer()
        }
    }
}

// Menu
func mainMenu() {
    print("Welcome to Tic-Tac-Toe!")
    while true {
        print("""
        Select AI Difficulty:
        1. Easy
        2. Medium
        3. Hard
        """)
        let levelInput = readLine()
        var level = "easy"
        switch levelInput {
        case "2":
            level = "medium"
        case "3":
            level = "hard"
        default:
            level = "easy"
        }

        let game = TicTacToeGame(aiLevel: level)
        game.play()

        print("Play again? (y/n): ", terminator: "")
        if readLine()?.lowercased() != "y" {
            print("Thanks for playing!")
            break
        }
    }
}

// Run the game
mainMenu()
